<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.splendiddata</groupId>
		<artifactId>pg_sqlparser</artifactId>
		<version>15.2-SNAPSHOT</version>
	</parent>
	<groupId>com.splendiddata.pg_sqlparser</groupId>
	<artifactId>parser</artifactId>
	<name>parser</name>
	<description>Parser to read postgres 's sql dialect into java objects.</description>
	<!-- This module needs Bison to be installed in the OS. Do check the Bison 
		version as not all of them are usable. Version 2.7 appears to be ok. -->

	<dependencies>
		<dependency>
			<groupId>com.splendiddata.pg_sqlparser</groupId>
			<artifactId>parser-enums</artifactId>
				<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
		</dependency>
				<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
		</dependency>

        <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
        </dependency>
		
		<dependency>
			<groupId>org.checkerframework</groupId>
			<artifactId>checker-qual</artifactId>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-runner</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-params</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<!-- Creates an output directory for Bison -->
						<phase>generate-sources</phase>
						<configuration>
							<target>
								<mkdir
									dir="${project.build.directory}/generated-sources/generated.java/com/splendiddata/sqlparser" />
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>com.splendiddata.pg_sqlparser</groupId>
				<artifactId>grammar-to-java</artifactId>
				<executions>

					<execution>
						<id>convertLex</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>convertLex</goal>
						</goals>
						<!-- Converts Postgres's src/backend/parser/scan.l file to generate 
							Java instead of C code. -->
						<configuration>
							<sourceDir>${basedir}/src/main/scanner/postgres/src/backend/parser</sourceDir>
							<targetDir>${project.build.directory}/generated-sources/converted.scanner</targetDir>
							<packageName>com.splendiddata.sqlparser</packageName>
						</configuration>
					</execution>

					<execution>
						<id>convertGrammar</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>convertGrammar</goal>
						</goals>
						<!-- Converts Postgres's src/backend/parser/gram.y file to enable Bison 
							to generate syntactically more or less correct Java instead of C code. The 
							generated file however will not compile as Java limits the generated object 
							code to a maximum of 64 kB per method, and the generated file will get far 
							beyond that. So the generated Java code needs to be converted by the convertJava 
							step to compile. -->
						<configuration>
							<sourceDir>${basedir}/src/main/grammar</sourceDir>
							<targetDir>${project.build.directory}/generated-sources/converted.grammar</targetDir>
							<packageName>com.splendiddata.sqlparser</packageName>
						</configuration>
					</execution>

					<execution>
						<id>convertJava</id>
						<phase>process-resources</phase>
						<goals>
							<goal>convertJava</goal>
						</goals>
						<!-- The Bison generated source file will not compile as the yyaction 
							method and the static initializer go well beyond the maximum of 64 kB of 
							Java generated object code and because a lot of typecasts are based on pre-object 
							orientation C constucts. The covertJava execution externalizes the huge tables 
							of the static initializer, cuts the yyaction method in fractions that can 
							be handled by the Java compiler and "corrects" type casts. -->
						<configuration>
							<sourceDir>${project.build.directory}/generated-sources/generated.java</sourceDir>
							<targetDir>${project.build.directory}/generated-sources/converted.java</targetDir>
							<packageName>com.splendiddata.sqlparser</packageName>
						</configuration>
					</execution>

					<execution>
						<id>createJaxbIndex</id>
						<goals>
							<goal>createJaxbIndex</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>bison-parser</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<!-- Bison generates Java source code from the modified gram.y file. -->
						<configuration>
							<executable>bison</executable>
							<arguments>
								<argument>--output</argument>
								<argument>
									${project.build.directory}/generated-sources/generated.java/com/splendiddata/sqlparser/SqlParser.java
								</argument>
								<argument>--language</argument>
								<argument>java</argument>
								<argument>${project.build.directory}/generated-sources/converted.grammar/gram.y
								</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>process-resources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<!-- Adds the directory where the parser's final Java source file is 
							generated -->
						<configuration>
							<sources>
								<source>${project.build.directory}/generated-sources/converted.java</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>de.jflex</groupId>
				<artifactId>jflex-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>process-resources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<!-- Generates Java code from the converted scan.l file -->
						<configuration>
							<outputDirectory>${project.build.directory}/generated-sources/jflex</outputDirectory>
							<lexDefinitions>
								<lexDefinition>${project.build.directory}/generated-sources/converted.scanner
								</lexDefinition>
							</lexDefinitions>
						</configuration>
					</execution>
				</executions>
			</plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifestEntries>
                            <License>https://www.gnu.org/licenses/gpl-3.0.en.html</License>
                            <Vendor>https://www.splendiddata.com</Vendor>
                            <Copyright>Copyright (c) Splendid Data Product Development B.V. 2013 - 2021</Copyright>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
		</plugins>
	</build>
</project> 
